1641412783
AwuilbDvXz%3A1b75fffba8398f9bc76a6f49c1fb74b0-d7c0f83c9d2934b546ff667dcd7c6eb8
s:15916:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6ImQ3YzBmODNjOWQyOTM0YjU0NmZmNjY3ZGNkN2M2ZWI4IjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWUiO3M6MjU6ImNfVmFsaWRlckZpY2hlRGVGcmFpcy5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czozNzoiY29udHJvbGV1cnMvY19WYWxpZGVyRmljaGVEZUZyYWlzLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTExMTc6Ijw/cGhwCi8qCiAqIFRvIGNoYW5nZSB0aGlzIGxpY2Vuc2UgaGVhZGVyLCBjaG9vc2UgTGljZW5zZSBIZWFkZXJzIGluIFByb2plY3QgUHJvcGVydGllcy4KICogVG8gY2hhbmdlIHRoaXMgdGVtcGxhdGUgZmlsZSwgY2hvb3NlIFRvb2xzIHwgVGVtcGxhdGVzCiAqIGFuZCBvcGVuIHRoZSB0ZW1wbGF0ZSBpbiB0aGUgZWRpdG9yLgogKi8KCiRhY3Rpb24gPSBmaWx0ZXJfaW5wdXQoSU5QVVRfR0VULCAnYWN0aW9uJywgRklMVEVSX1NBTklUSVpFX1NUUklORyk7CiRpZFZpc2l0ZXVyID0gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsICdsc3RWaXNpdGV1cicsIEZJTFRFUl9TQU5JVElaRV9TVFJJTkcpOwokbW9udGFudHMgPSAwOwokcGRvLT5DbG90dXJlRmljaGUoKTsKc3dpdGNoICgkYWN0aW9uKSB7CiAgICBjYXNlICdzZWxlY3Rpb25uZXJNb2lzJyA6CiAgICAgICAgaWYgKGVtcHR5KCRwZG8tPmdldE1vaXNGaWNoZURlRnJhaXMoKSkpIHsKICAgICAgICAgICAgPz48L2JyPjw/cGhwCiAgICAgICAgICAgIGFqb3V0ZXJFcnJldXIoIkF1Y3VuZSBmaWNoZSBkZSBmcmFpcyBuJ2VzdCDDoCB2YWxpZGVyIik7CiAgICAgICAgICAgIGluY2x1ZGUgJ3Z1ZXMvdl9lcnJldXJzLnBocCc7CiAgICAgICAgICAgIGluY2x1ZGUgJ3Z1ZXMvdl9TZWxlY3RNb2lzLnBocCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJGxlc01vaXMgPSAkcGRvLT5nZXRNb2lzRmljaGVEZUZyYWlzKCk7CiAgICAgICAgICAgIC8vIEFmaW4gZGUgc8OpbGVjdGlvbm5lciBwYXIgZMOpZmF1dCBsZSBkZXJuaWVyIG1vaXMgZGFucyBsYSB6b25lIGRlIGxpc3RlCiAgICAgICAgICAgIC8vIG9uIGRlbWFuZGUgdG91dGVzIGxlcyBjbMOpcywgZXQgb24gcHJlbmQgbGEgcHJlbWnDqHJlLAogICAgICAgICAgICAvLyBsZXMgbW9pcyDDqXRhbnQgdHJpw6lzIGTDqWNyb2lzc2FudHMKICAgICAgICAgICAgJGxlc0NsZXMgPSBhcnJheV9rZXlzKCRsZXNNb2lzKTsKICAgICAgICAgICAgJG1vaXNBU2VsZWN0aW9ubmUgPSAkbGVzQ2xlc1swXTsKICAgICAgICAgICAgaW5jbHVkZSAndnVlcy92X1NlbGVjdE1vaXMucGhwJzsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdzZWxlY3Rpb25uZXJWaXNpdGV1cicgOgogICAgICAgICRsZU1vaXMgPSBmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwgJ2xzdE1vaXMnLCBGSUxURVJfU0FOSVRJWkVfU1RSSU5HKTsKICAgICAgICAkbGVzTW9pcyA9ICRwZG8tPmdldE1vaXNGaWNoZURlRnJhaXMoKTsKICAgICAgICAkbW9pc0FTZWxlY3Rpb25uZSA9ICRsZU1vaXM7CiAgICAgICAgaW5jbHVkZSAndnVlcy92X1NlbGVjdE1vaXMucGhwJzsKICAgICAgICAvL0xhIHZhcmlhYmxlICRkYXRlIHByZW5kcmEgbGEgdmFsZXVyIGR1IG1vaXMgc2VsZWN0aW9ubsOpCiAgICAgICAgJGRhdGUgPSBzdHJfcmVwbGFjZSgnLycsICcnLCBmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwgJ2xzdE1vaXMnLCBGSUxURVJfU0FOSVRJWkVfU1RSSU5HKSk7CiAgICAgICAgdHJpbSgkZGF0ZSk7CiAgICAgICAgJF9TRVNTSU9OWydkYXRlJ10gPSAkZGF0ZTsKICAgICAgICAvL1NlbGVjdGlvbiBkZXMgdmlzaXRldXIgZW4gZm9uY3Rpb24gZHUgbW9pcwogICAgICAgICRsZXNWaXNpdGV1ciA9ICRwZG8tPmdldFZpc2l0ZXVyRnJvbU1vaXMoJGRhdGUpOwogICAgICAgICRzZWxlY3RlZFZhbHVlID0gJGxlc1Zpc2l0ZXVyWzBdOwogICAgICAgIGluY2x1ZGUgJ3Z1ZXMvdl9TZWxlY3RWaXNpdGV1ci5waHAnOwogICAgICAgIGJyZWFrOwogICAgY2FzZSAnVmFsaWRlckZpY2hlRGVGcmFpcyc6CiAgICAgICAgJGxlc01vaXMgPSAkcGRvLT5nZXRNb2lzRmljaGVEZUZyYWlzKCk7CiAgICAgICAgJG1vaXNBU2VsZWN0aW9ubmUgPSAkX1NFU1NJT05bJ2RhdGUnXTsKICAgICAgICBpbmNsdWRlICd2dWVzL3ZfU2VsZWN0TW9pcy5waHAnOwogICAgICAgICRsZVZpc2l0ZXVyID0gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsICdsc3RWaXNpdGV1cicsIEZJTFRFUl9TQU5JVElaRV9TVFJJTkcpOwogICAgICAgICRsZXNWaXNpdGV1ciA9ICRwZG8tPmdldFZpc2l0ZXVyRnJvbU1vaXMoJF9TRVNTSU9OWydkYXRlJ10pOwogICAgICAgICRzZWxlY3RlZFZhbHVlID0gJGxlVmlzaXRldXI7CiAgICAgICAgaW5jbHVkZSAndnVlcy92X1NlbGVjdFZpc2l0ZXVyLnBocCc7CiAgICAgICAgLy9SZWN1cMOocmUgbGUgbm9tIGR1IHZpc2l0ZXVyIHNlbGVjdGlvbm7DqQogICAgICAgICRub21WaXMgPSAoZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsICdsc3RWaXNpdGV1cicsIEZJTFRFUl9TQU5JVElaRV9TVFJJTkcpKTsKICAgICAgICB0cmltKCRub21WaXMpOwogICAgICAgICRfU0VTU0lPTlsnbm9tVmlzaXRldXInXSA9ICRub21WaXM7CiAgICAgICAgLy9Bdm9pciBsJ2lkIGR1IHZpc2l0ZXVyIGVuIGZvbmN0aW9uIGRlIHNvbiBub20tcHJlbm9tCiAgICAgICAgJGlkVmlzID0gJHBkby0+Z2V0SWRGcm9tTm9tVmlzaXRldXIoJG5vbVZpcyk7CiAgICAgICAgJF9TRVNTSU9OWyd2aXNpdGV1ciddID0gJGlkVmlzWydpZCddOwogICAgICAgIC8vU2VsZWN0aW9uIGRlIHRvdXRlcyBsZXMgaW5mb3MgY29uY2VybmFudCBsZSB2aXNpdGV1ciBzZWxlY3Rpb25uw6kKICAgICAgICAkaW5mb0ZpY2hlRGVGcmFpcyA9ICRwZG8tPmdldExlc0luZm9zRmljaGVGcmFpcygkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICAkaW5mb0ZyYWlzRm9yZmFpdCA9ICRwZG8tPmdldExlc0ZyYWlzRm9yZmFpdCgkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICAkaW5mb0ZyYWlzSG9yc0ZvcmZhaXQgPSAkcGRvLT5nZXRMZXNGcmFpc0hvcnNGb3JmYWl0KCRfU0VTU0lPTlsndmlzaXRldXInXSwgJF9TRVNTSU9OWydkYXRlJ10pOwogICAgICAgIGluY2x1ZGUndnVlcy92X1ZhbGlkZXJGaWNoZURlRnJhaXMucGhwJzsKICAgICAgICAkX1NFU1NJT05bJ21vbnRhbnQnXSA9ICRtb250YW50czsKICAgICAgICBicmVhazsKICAgIGNhc2UgJ0NvcnJpZ2VyTmJKdXN0aWZpY2F0aWZzJyA6CiAgICAgICAgJGxlc01vaXMgPSAkcGRvLT5nZXRNb2lzRmljaGVEZUZyYWlzKCk7CiAgICAgICAgJG1vaXNBU2VsZWN0aW9ubmUgPSAkX1NFU1NJT05bJ2RhdGUnXTsKICAgICAgICBpbmNsdWRlICd2dWVzL3ZfU2VsZWN0TW9pcy5waHAnOwogICAgICAgICRsZXNWaXNpdGV1ciA9ICRwZG8tPmdldFZpc2l0ZXVyRnJvbU1vaXMoJF9TRVNTSU9OWydkYXRlJ10pOwogICAgICAgICRzZWxlY3RlZFZhbHVlID0gJF9TRVNTSU9OWydub21WaXNpdGV1ciddOwogICAgICAgIGluY2x1ZGUgJ3Z1ZXMvdl9TZWxlY3RWaXNpdGV1ci5waHAnOwogICAgICAgIC8vTGEgdmFyaWFibGUgJG5iSnVzdCBwcmVuZHJhIGxhIHZhbGV1ciBkdSBub21icmUgZGUganVzdGlmaWNhdGlmIGluZGlxdcOpCiAgICAgICAgJG5iSnVzdCA9IGZpbHRlcl9pbnB1dChJTlBVVF9QT1NULCAnbmJKdXN0JywgRklMVEVSX0RFRkFVTFQpOwogICAgICAgIC8vVGVzdCBkZSBsYSB2YWxldXIgc2kgZWxsZSBlc3QgdW4gZW50aWVyIHBvc2l0aWYKICAgICAgICBpZiAoZXN0RW50aWVyUG9zaXRpZigkbmJKdXN0KSkgewogICAgICAgICAgICAkcGRvLT5tYWpOYkp1c3RpZmljYXRpZnMoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSwgJG5iSnVzdCk7CiAgICAgICAgICAgID8+CiAgICAgICAgICAgIDxzY3JpcHQ+YWxlcnQoIjw/cGhwIGVjaG8gaHRtbHNwZWNpYWxjaGFycygnVm90cmUgZmljaGUgZGUgZnJhaXMgYSBiaWVuIMOpdMOpIGNvcnJpZ8OpZSAhICcsIEVOVF9RVU9URVMpOyA/PiIpPC9zY3JpcHQ+CiAgICAgICAgICAgIDw/cGhwCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWpvdXRlckVycmV1cignTGVzIHZhbGV1cnMgZGVzIGZyYWlzIGRvaXZlbnQgw6p0cmUgbnVtw6lyaXF1ZXMnKTsKICAgICAgICAgICAgaW5jbHVkZSAndnVlcy92X2VycmV1cnMucGhwJzsKICAgICAgICB9CiAgICAgICAgJGluZm9GaWNoZURlRnJhaXMgPSAkcGRvLT5nZXRMZXNJbmZvc0ZpY2hlRnJhaXMoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0ZvcmZhaXQgPSAkcGRvLT5nZXRMZXNGcmFpc0ZvcmZhaXQoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0hvcnNGb3JmYWl0ID0gJHBkby0+Z2V0TGVzRnJhaXNIb3JzRm9yZmFpdCgkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICBpbmNsdWRlJ3Z1ZXMvdl9WYWxpZGVyRmljaGVEZUZyYWlzLnBocCc7CgogICAgICAgIGJyZWFrOwogICAgY2FzZSAnQ29ycmlnZXJGcmFpc0ZvcmZhaXQnOgogICAgICAgICRsZXNNb2lzID0gJHBkby0+Z2V0TW9pc0ZpY2hlRGVGcmFpcygpOwogICAgICAgICRtb2lzQVNlbGVjdGlvbm5lID0gJF9TRVNTSU9OWydkYXRlJ107CiAgICAgICAgaW5jbHVkZSAndnVlcy92X1NlbGVjdE1vaXMucGhwJzsKICAgICAgICAkbGVzVmlzaXRldXIgPSAkcGRvLT5nZXRWaXNpdGV1ckZyb21Nb2lzKCRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICAkc2VsZWN0ZWRWYWx1ZSA9ICRfU0VTU0lPTlsnbm9tVmlzaXRldXInXTsKICAgICAgICBpbmNsdWRlICd2dWVzL3ZfU2VsZWN0VmlzaXRldXIucGhwJzsKICAgICAgICAvL0xhIHZhcmlhYmxlICRsZXNGcmFpcyBzZXJhIHVuIHRhYmxlYXUgYXZlYyBsZXMgdmFsZXVycyBkZXMgZGlmZsOpcmVudHMgZnJhaXMgaW5kaXF1w6lzCiAgICAgICAgJGxlc0ZyYWlzID0gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsICdsZXNGcmFpcycsIEZJTFRFUl9ERUZBVUxULCBGSUxURVJfRk9SQ0VfQVJSQVkpOwogICAgICAgIC8vVGVzdCBzaSBsZXMgcXVhbnRpdMOpcyBzb250IHZhbGlkZXMKICAgICAgICBpZiAobGVzUXRlRnJhaXNWYWxpZGVzKCRsZXNGcmFpcykpIHsKICAgICAgICAgICAgJHBkby0+bWFqRnJhaXNGb3JmYWl0KCRfU0VTU0lPTlsndmlzaXRldXInXSwgJF9TRVNTSU9OWydkYXRlJ10sICRsZXNGcmFpcyk7CiAgICAgICAgICAgID8+CiAgICAgICAgICAgIDxzY3JpcHQ+YWxlcnQoIjw/cGhwIGVjaG8gaHRtbHNwZWNpYWxjaGFycygnVm90cmUgZmljaGUgZGUgZnJhaXMgYSBiaWVuIMOpdMOpIGNvcnJpZ8OpZSAhICcsIEVOVF9RVU9URVMpOyA/PiIpPC9zY3JpcHQ+CiAgICAgICAgICAgIDw/cGhwCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWpvdXRlckVycmV1cignTGVzIHZhbGV1cnMgZGVzIGZyYWlzIGRvaXZlbnQgw6p0cmUgbnVtw6lyaXF1ZXMnKTsKICAgICAgICAgICAgaW5jbHVkZSAndnVlcy92X2VycmV1cnMucGhwJzsKICAgICAgICB9CiAgICAgICAgJGluZm9GaWNoZURlRnJhaXMgPSAkcGRvLT5nZXRMZXNJbmZvc0ZpY2hlRnJhaXMoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0ZvcmZhaXQgPSAkcGRvLT5nZXRMZXNGcmFpc0ZvcmZhaXQoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0hvcnNGb3JmYWl0ID0gJHBkby0+Z2V0TGVzRnJhaXNIb3JzRm9yZmFpdCgkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICBpbmNsdWRlJ3Z1ZXMvdl9WYWxpZGVyRmljaGVEZUZyYWlzLnBocCc7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdDb3JyaWdlckVsZW1Ib3JzRm9yZmFpdCcgOgogICAgICAgICRsZXNNb2lzID0gJHBkby0+Z2V0TW9pc0ZpY2hlRGVGcmFpcygpOwogICAgICAgICRtb2lzQVNlbGVjdGlvbm5lID0gJF9TRVNTSU9OWydkYXRlJ107CiAgICAgICAgaW5jbHVkZSAndnVlcy92X1NlbGVjdE1vaXMucGhwJzsKICAgICAgICAkbGVzVmlzaXRldXIgPSAkcGRvLT5nZXRWaXNpdGV1ckZyb21Nb2lzKCRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICAkc2VsZWN0ZWRWYWx1ZSA9ICRfU0VTU0lPTlsnbm9tVmlzaXRldXInXTsKICAgICAgICBpbmNsdWRlICd2dWVzL3ZfU2VsZWN0VmlzaXRldXIucGhwJzsKICAgICAgICAvL0xhIHZhcmlhYmxlICRsZXNIb3JzRm9yZmFpdERhdGUgc2VyYSB1biB0YWJsZWF1IGF2ZWMgbGVzIHZhbGV1cnMgZGVzIGRpZmbDqXJlbnRlcyBkYXRlcyBpbmRpcXXDqWVzCiAgICAgICAgJGxlc0hvcnNGb3JmYWl0RGF0ZSA9IChmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwgJ2xlc0RhdGVzJywgRklMVEVSX0RFRkFVTFQsIEZJTFRFUl9GT1JDRV9BUlJBWSkpOwogICAgICAgIC8vTGEgdmFyaWFibGUgJGxlc0hvcnNGb3JmYWl0TGliZWxsZSBzZXJhIHVuIHRhYmxlYXUgYXZlYyBsZXMgdmFsZXVycyBkZXMgZGlmZsOpcmVudHMgbGliZWxsZXMgaW5kaXF1w6lzCiAgICAgICAgJGxlc0hvcnNGb3JmYWl0TGliZWxsZSA9IChmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwgJ2xlc0xpYmVsbGVzJywgRklMVEVSX0RFRkFVTFQsIEZJTFRFUl9GT1JDRV9BUlJBWSkpOwogICAgICAgIC8vTGEgdmFyaWFibGUgJGxlc0hvcnNGb3JmYWl0TW9udGFudCBzZXJhIHVuIHRhYmxlYXUgYXZlYyBsZXMgdmFsZXVycyBkZXMgZGlmZsOpcmVudHMgbW9udGFudHMgaW5kaXF1w6lzCiAgICAgICAgJGxlc0hvcnNGb3JmYWl0TW9udGFudCA9IChmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwgJ2xlc01vbnRhbnRzJywgRklMVEVSX0RFRkFVTFQsIEZJTFRFUl9GT1JDRV9BUlJBWSkpOwogICAgICAgIC8vRMOpYnV0IGRlcyB0ZXN0cwogICAgICAgIGZvcmVhY2ggKCRsZXNIb3JzRm9yZmFpdERhdGUgYXMgJHVuZURhdGUpIHsKICAgICAgICAgICAgZGF0ZUFuZ2xhaXNWZXJzRnJhbmNhaXMoJHVuZURhdGUpOwogICAgICAgICAgICBmb3JlYWNoICgkbGVzSG9yc0ZvcmZhaXRMaWJlbGxlIGFzICR1bkxpYmVsbGUpIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRsZXNIb3JzRm9yZmFpdE1vbnRhbnQgYXMgJHVuTW9udGFudCkgewogICAgICAgICAgICAgICAgICAgIC8vVGVzdCBzaSBsYSBkYXRlIG4nZXN0IHBhcyBuJ2VzdCBwYXMgZMOpcGFzc8OpZSBkZSBwbHVzIGQndW4gYW4gZXQgc2kgbGUgbGliZWxsZSBldCBsZSBtb250YW50IG5lIHNvbnQgcGFzIG51bHMKICAgICAgICAgICAgICAgICAgICBpZiAoZXN0RGF0ZURlcGFzc2VlKCR1bmVEYXRlKSB8fCAoJHVuTGliZWxsZSA9PSAnJykgfHwgKCR1bk1vbnRhbnQgPT0gJycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFqb3V0ZXJFcnJldXIoJ1VuZSBpbmZvcm1hdGlvbiBlc3QgbWF1dmFpc2UuIFJhcHBlbDogZGF0ZSBkZSBtb2lucyBkZSAxIGFucywgbGliZWxsZSBldCBtb250YW50IG5vbiBudWxsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGUgJ3Z1ZXMvdl9lcnJldXJzLnBocCc7CiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIDM7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHBkby0+bWFqRnJhaXNIb3JzRm9yZmFpdCgkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddLCAkbGVzSG9yc0ZvcmZhaXRMaWJlbGxlLCAkbGVzSG9yc0ZvcmZhaXRNb250YW50LCAkbGVzSG9yc0ZvcmZhaXREYXRlKTsKICAgICAgICAgICAgICAgICAgICAgICAgPz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdD5hbGVydCgiPD9waHAgZWNobyBodG1sc3BlY2lhbGNoYXJzKCdWb3RyZSBmaWNoZSBkZSBmcmFpcyBhIGJpZW4gw6l0w6kgY29ycmlnw6llICEgJywgRU5UX1FVT1RFUyk7ID8+Iik8L3NjcmlwdD4KICAgICAgICAgICAgICAgICAgICAgICAgPD9waHAKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgMzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJGluZm9GaWNoZURlRnJhaXMgPSAkcGRvLT5nZXRMZXNJbmZvc0ZpY2hlRnJhaXMoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0ZvcmZhaXQgPSAkcGRvLT5nZXRMZXNGcmFpc0ZvcmZhaXQoJF9TRVNTSU9OWyd2aXNpdGV1ciddLCAkX1NFU1NJT05bJ2RhdGUnXSk7CiAgICAgICAgJGluZm9GcmFpc0hvcnNGb3JmYWl0ID0gJHBkby0+Z2V0TGVzRnJhaXNIb3JzRm9yZmFpdCgkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddKTsKICAgICAgICBpbmNsdWRlJ3Z1ZXMvdl9WYWxpZGVyRmljaGVEZUZyYWlzLnBocCc7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdzdXBwcmltZXJGcmFpcyc6CiAgICAgICAgLy9SZWN1cMOocmUgbGVzIHZhbGV1cnMgY29uY2VybmFudCBsZSB2aXNpdGV1ciBwYXNzw6llcyBkYW5zIGwndXJsCiAgICAgICAgJHVuSWRGcmFpcyA9IGZpbHRlcl9pbnB1dChJTlBVVF9HRVQsICdpZEZyYWlzJywgRklMVEVSX1NBTklUSVpFX05VTUJFUl9JTlQpOwogICAgICAgICRjZU1vaXMgPSBmaWx0ZXJfaW5wdXQoSU5QVVRfR0VULCAnbW9pcycsIEZJTFRFUl9TQU5JVElaRV9TVFJJTkcpOwogICAgICAgICRpZFZpc2l0ZXVyID0gZmlsdGVyX2lucHV0KElOUFVUX0dFVCwgJ2lkVmlzaXRldXInLCBGSUxURVJfU0FOSVRJWkVfU1RSSU5HKTsKICAgICAgICA/PjwvYnI+CiAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyIgcm9sZT0iYWxlcnQiPgogICAgICAgICAgICA8cD48aDQ+Vm91bGV6IHZvdXMgbW9kaWZpZXIgb3Ugc3VwcHJpbWVyIGxlIGZyYWlzPzxicj48L2g0PgogICAgICAgICAgICA8YSBocmVmPSJpbmRleC5waHA/dWM9VmFsaWRlckZpY2hlRGVGcmFpcyZhY3Rpb249c3VwcHJpbWVyJmlkRnJhaXM9PD9waHAgZWNobyAkdW5JZEZyYWlzID8+Ij5TdXBwcmltZXI8L2E+IAogICAgICAgICAgICBvdSA8YSBocmVmPSJpbmRleC5waHA/dWM9VmFsaWRlckZpY2hlRGVGcmFpcyZhY3Rpb249cmVwb3J0ZXImaWRGcmFpcz08P3BocCBlY2hvICR1bklkRnJhaXMgPz4mbW9pcz08P3BocCBlY2hvICRjZU1vaXMgPz4maWQ9PD9waHAgZWNobyAkaWRWaXNpdGV1ciA/PiI+UmVwb3J0ZXI8L2E+PC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDw/cGhwCiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdzdXBwcmltZXInOgogICAgICAgIC8vUmVjdXDDqHJlIGwnaWQgY29uY2VybmFudCBsZSB2aXNpdGV1ciBwYXNzw6kgZGFucyBsJ3VybAogICAgICAgICRpZEZyYWlzID0gZmlsdGVyX2lucHV0KElOUFVUX0dFVCwgJ2lkRnJhaXMnLCBGSUxURVJfU0FOSVRJWkVfTlVNQkVSX0lOVCk7CiAgICAgICAgJHBkby0+cmVmdXNlckZyYWlzSG9yc0ZvcmZhaXQoJGlkRnJhaXMpOwogICAgICAgID8+CiAgICAgICAgPGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtaW5mbyIgcm9sZT0iYWxlcnQiPgogICAgICAgICAgICA8cD5DZSBmcmFpcyBob3JzIGZvcmZhaXQgYSBiaWVuIMOpdMOpIHN1cHByaW3DqSEgPGEgaHJlZiA9ICJpbmRleC5waHA/dWM9VmFsaWRlckZpY2hlRGVGcmFpcyZhY3Rpb249c2VsZWN0aW9ubmVyTW9pcyI+Q2xpcXVleiBpY2k8L2E+CiAgICAgICAgICAgICAgICBwb3VyIHJldmVuaXIgw6AgbGEgc2VsZWN0aW9uLjwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8P3BocAogICAgICAgIGJyZWFrOwoKICAgIGNhc2UgJ3JlcG9ydGVyJzoKICAgICAgICAvL1JlY3Vww6hyZSBsZXMgdmFsZXVycyBjb25jZXJuYW50IGxlIHZpc2l0ZXVyIHBhc3PDqWVzIGRhbnMgbCd1cmwKICAgICAgICAkaWRGcmFpcyA9IGZpbHRlcl9pbnB1dChJTlBVVF9HRVQsICdpZEZyYWlzJywgRklMVEVSX1NBTklUSVpFX05VTUJFUl9JTlQpOwogICAgICAgICRtb2lzID0gZmlsdGVyX2lucHV0KElOUFVUX0dFVCwgJ21vaXMnLCBGSUxURVJfU0FOSVRJWkVfU1RSSU5HKTsKICAgICAgICAkbW9pc1N1aXZhbnQgPSAkcGRvLT5nZXRNb2lzU3VpdmFudCgkbW9pcyk7CiAgICAgICAgJGlkVmlzaXRldXIgPSBmaWx0ZXJfaW5wdXQoSU5QVVRfR0VULCAnaWQnLCBGSUxURVJfU0FOSVRJWkVfU1RSSU5HKTsKICAgICAgICAvL1Rlc3Qgc2kgdW4gZmljaGUgZGUgZnJhaXMgZXhpc3RlIGTDqWrDoCBwb3VyIGNlIG1vaXMgb3Ugbm9uIGV0IHNpbm9uIGNyw6llciB1bmUgbm91dmVsbGUgZmljaGUKICAgICAgICBpZiAoJHBkby0+ZXN0UHJlbWllckZyYWlzTW9pcygkaWRWaXNpdGV1ciwgJG1vaXNTdWl2YW50KSkgewogICAgICAgICAgICAkcGRvLT5jcmVlTm91dmVsbGVzTGlnbmVzRnJhaXMoJGlkVmlzaXRldXIsICRtb2lzU3VpdmFudCk7CiAgICAgICAgfQogICAgICAgICRtb2lzQVJlcG9ydGVyID0gJHBkby0+cmVwb3J0ZXJGcmFpc0hvcnNGb3JmYWl0KCRpZEZyYWlzLCAkbW9pcyk7CiAgICAgICAgPz4KICAgICAgICA8ZGl2IGNsYXNzPSJhbGVydCBhbGVydC1pbmZvIiByb2xlPSJhbGVydCI+CiAgICAgICAgICAgIDxwPkNlIGZyYWlzIGhvcnMgZm9yZmFpdCBhIGJpZW4gw6l0w6kgcmVwb3J0w6kgYXUgbW9pcyBzdWl2YW50ISA8YSBocmVmID0gImluZGV4LnBocD91Yz1WYWxpZGVyRmljaGVEZUZyYWlzJmFjdGlvbj1zZWxlY3Rpb25uZXJNb2lzIj5DbGlxdWV6IGljaTwvYT4KICAgICAgICAgICAgICAgIHBvdXIgcmV2ZW5pciDDoCBsYSBzZWxlY3Rpb24uPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDw/cGhwCiAgICAgICAgYnJlYWs7CiAgICBjYXNlICdWYWxpZGVyJyA6CiAgICAgICAgJHBkby0+dmFsaWRlckZpY2hlRGVGcmFpcygkX1NFU1NJT05bJ3Zpc2l0ZXVyJ10sICRfU0VTU0lPTlsnZGF0ZSddLCAkX1NFU1NJT05bJ21vbnRhbnQnXSk7CiAgICAgICAgPz4gPC9icj4KICAgICAgICA8ZGl2IGNsYXNzID0gImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiIHJvbGUgPSAiYWxlcnQiPgogICAgICAgICAgICA8cD5Wb3RyZSBmaWNoZSBkZSBmcmFpcyBhIGJpZW4gw6l0w6kgdmFsaWTDqWUgISA8YSBocmVmID0gImluZGV4LnBocD91Yz1WYWxpZGVyRmljaGVEZUZyYWlzJmFjdGlvbj1zZWxlY3Rpb25uZXJNb2lzIj5DbGlxdWV6IGljaTwvYT4KICAgICAgICAgICAgICAgIHBvdXIgcmV2ZW5pciDDoCBsYSBzZWxlY3Rpb24uPC9wPgogICAgICAgIDwvZGl2PgogICAgPD9waHAKfQogICAgIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";